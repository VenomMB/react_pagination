{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","countOfPage","Math","ceil","isFirstPage","isLastPage","pages","i","className","classNames","disabled","href","onClick","map","page","active","items","from","to","numbers","n","push","getNumbers","length","itemsOnPage","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","lastItemOnPage","startItemOnPage","visibleItemsOnCurrentPage","slice","id","value","onChange","event","Number","target","item","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"oNAUaA,EAAwB,SAAC,GAYpC,IAPK,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QAGI,IAFJC,mBAEI,MAFU,EAEV,EADJC,EACI,EADJA,aAEMC,EAAcC,KAAKC,KAAKN,EAAQC,GAChCM,EAA8B,IAAhBL,EACdM,EAAaN,IAAgBE,EAE7BK,EAAkB,GAEfC,EAAI,EAAGA,GAAKN,EAAaM,GAAK,EACrCD,EAAMC,EAAI,GAAKA,EAejB,OACE,mCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CACrCC,SAAUN,IADZ,SAIE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeP,EACfQ,QAlBsB,WACzBR,GACHJ,EAAaD,EAAc,IAWvB,oBAUAO,EAAMO,KAAI,SAAAC,GAAI,OACd,oBACEN,UAAWC,IAAW,YAAa,CACjCM,OAAQD,IAASf,IAFrB,SAME,mBACE,UAAQ,WACRS,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMZ,EAAac,IAJ9B,SAMGA,KAREA,MAYT,oBAAIN,UAAWC,IAAW,YAAa,CACrCC,SAAUL,IADZ,SAIE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAvDuB,WAC3Bb,EAAcE,GAChBD,EAAaD,EAAc,IAgDvB,0BCvEJiB,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IACzBT,KAAI,SAAAO,GAAC,qBAAYA,MACdvB,EAAQmB,EAAMO,OAEdC,EAAc,CAAC,EAAG,EAAG,GAAI,IAElBC,EAAgB,WAC3B,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAS,GAA/C,mBAAO3B,EAAP,KAAoB8B,EAApB,KAEIC,EAAiBH,EAAe5B,EAC9BgC,EAAkBD,EAAiB,EAAIH,EACvCK,EAA4BhB,EAC/BiB,MAAMH,EAAiBH,EAAcG,GAEpCA,EAAiBjC,IACnBiC,EAAiBjC,GAYnB,OACE,sBAAKW,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWT,EADX,mBACiCgC,EADjC,cACsDD,EADtD,eAC2EjC,EAD3E,OAIA,sBAAKW,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACR0B,GAAG,kBACH1B,UAAU,eACV2B,MAAOR,EACPS,SApBiB,SAACC,GAC1BT,EAAgBU,OAAOD,EAAME,OAAOJ,QACpCN,EAAe,IAaT,SAOGL,EAAYX,KAAI,SAAA2B,GAAI,OACnB,wBAAQL,MAAOK,EAAf,SACGA,GADuBA,UAOhC,uBAAOC,QAAQ,kBAAkBjC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEX,MAAOA,EACPC,QAAS6B,EACT5B,YAAaA,EACbC,aA3Ce,SAACc,GACpBe,EAAef,MA6Cb,6BACGkB,EAA0BnB,KAAI,SAAA2B,GAAI,OACjC,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YErElCE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c7ed97f3.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\n\ninterface Props {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: FC<Props> = ({\n  total,\n  perPage,\n  currentPage = 1,\n  onPageChange,\n}) => {\n  const countOfPage = Math.ceil(total / perPage);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === countOfPage;\n\n  const pages: number[] = [];\n\n  for (let i = 1; i <= countOfPage; i += 1) {\n    pages[i - 1] = i;\n  }\n\n  const handleClickOnRightButton = () => {\n    if (currentPage < countOfPage) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  const handleClickOnLeftButton = () => {\n    if (!isFirstPage) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item', {\n          disabled: isFirstPage,\n        })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPage}\n            onClick={handleClickOnLeftButton}\n          >\n            «\n          </a>\n        </li>\n        { pages.map(page => (\n          <li\n            className={classNames('page-item', {\n              active: page === currentPage,\n            })}\n            key={page}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n        <li className={classNames('page-item', {\n          disabled: isLastPage,\n        })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={handleClickOnRightButton}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\nconst total = items.length;\n\nconst itemsOnPage = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  let lastItemOnPage = itemsPerPage * currentPage;\n  const startItemOnPage = lastItemOnPage + 1 - itemsPerPage;\n  const visibleItemsOnCurrentPage = items\n    .slice(lastItemOnPage - itemsPerPage, lastItemOnPage);\n\n  if (lastItemOnPage > total) {\n    lastItemOnPage = total;\n  }\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handleChangeSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    setItemsPerPage(Number(event.target.value));\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItemOnPage} - ${lastItemOnPage} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={itemsPerPage}\n            onChange={handleChangeSelect}\n          >\n            {itemsOnPage.map(item => (\n              <option value={item} key={item}>\n                {item}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={total}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {visibleItemsOnCurrentPage.map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}